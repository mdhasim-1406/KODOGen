import { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, Sparkles, Brain, FileCode, Folder, Image, FileText } from 'lucide-react';

interface DownloadButtonProps {
  taskId: string;
  isRealAI?: boolean;
}

const DownloadButton = ({ taskId, isRealAI = false }: DownloadButtonProps) => {
  const [isDownloading, setIsDownloading] = useState(false);
  const [downloadError, setDownloadError] = useState<string | null>(null);
  const [downloadSuccess, setDownloadSuccess] = useState(false);

  const handleDownload = async () => {
    if (!taskId) return;

    setIsDownloading(true);
    setDownloadError(null);
    setDownloadSuccess(false);

    try {
      const response = await fetch(`http://localhost:8000/api/download/${taskId}`);
      
      if (!response.ok) {
        throw new Error('Download failed');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `website-${taskId}.zip`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      setDownloadSuccess(true);
      setTimeout(() => setDownloadSuccess(false), 3000);
    } catch (error) {
      setDownloadError('Failed to download website files');
      console.error('Download error:', error);
    } finally {
      setIsDownloading(false);
    }
  };

  return (
    <div className="space-y-4">
      {/* Enhanced Header with AI Badge */}
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-800 flex items-center gap-2">
          <span className="text-shimmer">Download Your Website</span>
          {isRealAI && (
            <span className="px-2 py-1 text-xs bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-full">
              GPT-4 Generated
            </span>
          )}
        </h2>
      </div>

      <p className="text-gray-600">
        {isRealAI 
          ? "Your custom website has been generated by OpenAI GPT-4 and is ready for download!"
          : "Your website has been generated and is ready for download!"
        }
      </p>

      {/* Success Message */}
      {downloadSuccess && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="p-4 bg-green-50 border border-green-200 rounded-xl"
        >
          <div className="flex items-center gap-2">
            <motion.div
              animate={{ scale: [1, 1.2, 1] }}
              transition={{ duration: 0.5 }}
            >
              <Sparkles className="w-5 h-5 text-green-600" />
            </motion.div>
            <span className="text-green-800 font-medium">Download completed successfully! üéâ</span>
          </div>
        </motion.div>
      )}

      {/* Error Message */}
      {downloadError && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="p-4 bg-red-50 border border-red-200 rounded-xl"
        >
          <div className="flex items-center gap-2">
            <span className="text-red-600">‚ùå</span>
            <span className="text-red-800">{downloadError}</span>
          </div>
        </motion.div>
      )}

      {/* Main Download Button */}
      <motion.button
        onClick={handleDownload}
        disabled={!taskId || isDownloading}
        whileHover={!isDownloading ? { scale: 1.02 } : {}}
        whileTap={!isDownloading ? { scale: 0.98 } : {}}
        className={`
          w-full flex items-center justify-center gap-3 px-6 py-4 
          font-semibold text-lg rounded-xl transition-all duration-300
          ${isDownloading
            ? 'bg-gray-400 cursor-not-allowed'
            : 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl'
          }
        `}
      >
        {isDownloading ? (
          <>
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
              className="w-6 h-6 border-2 border-white border-t-transparent rounded-full"
            />
            <span>Preparing Download...</span>
          </>
        ) : (
          <>
            <Download className="w-6 h-6" />
            <span>Download Website Files</span>
          </>
        )}
      </motion.button>

      {/* Enhanced File Info */}
      <div className="glass-panel rounded-xl p-4 space-y-4">
        <div className="flex items-center gap-2">
          <Folder className="w-5 h-5 text-blue-600" />
          <h3 className="font-medium text-gray-800">Package Contents</h3>
        </div>
        
        <div className="grid grid-cols-1 gap-3">
          {[
            { icon: FileCode, label: "index.html", desc: "Main webpage file" },
            { icon: Sparkles, label: "styles.css", desc: "Beautiful responsive styling" },
            { icon: Brain, label: "script.js", desc: "Interactive functionality" },
            { icon: Image, label: "assets/", desc: "Images and media files" },
            { icon: FileText, label: "README.md", desc: "Deployment instructions" }
          ].map((item, index) => (
            <motion.div
              key={item.label}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className="flex items-center gap-3 p-3 bg-white/50 rounded-lg border border-white/30"
            >
              <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <item.icon className="w-4 h-4 text-blue-600" />
              </div>
              <div className="flex-1">
                <div className="font-medium text-gray-800">{item.label}</div>
                <div className="text-sm text-gray-600">{item.desc}</div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Deployment Tips */}
      <div className="glass-panel rounded-xl p-4">
        <div className="flex items-center gap-2 mb-3">
          <Sparkles className="w-4 h-4 text-purple-600" />
          <h4 className="font-medium text-gray-800">Quick Deploy</h4>
        </div>
        <p className="text-sm text-gray-600 mb-3">
          Your website is ready to deploy on any hosting platform:
        </p>
        <div className="flex flex-wrap gap-2">
          {["Netlify", "Vercel", "GitHub Pages", "AWS S3"].map((platform) => (
            <span
              key={platform}
              className="px-2 py-1 text-xs bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full"
            >
              {platform}
            </span>
          ))}
        </div>
      </div>
    </div>
  );
};

export default DownloadButton;